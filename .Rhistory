barplot(Pilot_data, h=5)
barplot(Pilot_data, H=5)
barplot(5, xlab="Treatment Group", ylab="Distance Traveled (cm)"_)
library(tidyverse)
ggplot(data=Pilot_data) +
geom_bar(stat="identity")
ggplot(data=Pilot_data, aes(x=group, y=cm_traveled)) +
geom_bar(stat="identity")
p <- ggplot(data=Pilot_data, aes(x=group, y=cm_traveled)) +
geom_bar(stat="identity")
p
barplot(table(cm_traveled$group),
ylab = "Distance Traveled (cm)",
xlab = "Group")
cm <- c(7, 162, 4, 0, 21)
group <- c(Control H2O, 0.04% DMSO, 0.08% DMSO, 4uM SER, 8uM SER)
group <- c(Control H2O, 0.04% DMSO, 0.08% DMSO, 4uM SER, 8uM SER)
group <- c('Control H2O', '0.04% DMSO', '0.08% DMSO', '4uM SER', '8uM SER')
barplot(table(cm_traveled$group),
ylab = "Distance Traveled (cm)",
xlab = "Group")
barplot(table(cm$group),
ylab = "Distance Traveled (cm)",
xlab = "Group")
data <- data.frame(group, cm)
barplot(table(cm$group),
ylab = "Distance Traveled (cm)",
xlab = "Group")
barplot(table(data),
ylab = "Distance Traveled (cm)",
xlab = "Group")
barplot(table(group$cm),
ylab = "Distance Traveled (cm)",
xlab = "Group")
barplot(table(cm$group),
ylab = "Distance Traveled (cm)",
xlab = "Group")
barplot(table(cm$group),
ylab = "Distance Traveled (cm)",
xlab = "Group")
barplot(data$cm)
barplot(data$cm,
ylab = "Distance Traveled (cm)",
xlab = "Treatment")
barplot(table(data$cm,
ylab = "Distance Traveled (cm)",
xlab = "Treatment")
barplot(table(data$cm),
barplot(table(data$cm),
ylab = "Distance Traveled (cm)",
xlab = "Treatment")
barplot(data$cm),
barplot(data$cm),
barplot(data$cm,
ylab = "Distance Traveled (cm)",
xlab = "Treatment")
ggplot(aes(x=group)) +
geom_bar() +
labs(y = "Distance Traveled (cm)", x = "Treatment")
ggplot(aes(data)) +
geom_bar() +
labs(y = "Distance Traveled (cm)", x = "Treatment")
data %>%
ggplot(aes(group)) +
geom_bar() +
labs(y = "Distance Traveled (cm)", x = "Treatment")
ggplot(aes(x = group)) +
geom_bar() +
labs(y = "Distance Traveled (cm)", x = "Treatment")
ggplot(aes(data%cm)) +
ggplot(aes(data%cm) +
ggplot(aes(data%cm) +
barplot(data$cm,
ylab = "Distance Traveled (cm)",
xlab = "Treatment")
ggplot(data, aes(x= group, fill = cm)) +
geom_bar()
ggplot(aes(x = group)) +
geom_bar() +
ylab = "Distance Traveled (cm)", +
ggplot(aes(x = group)) +
geom_bar() +
ylab = "Distance Traveled (cm)",
ggplot(data = data) +
geom_bar(mapping = aes(x=group, y=cm))
ggplot(data = data) +
geom_bar(mapping = aes(x=group))
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
treatment_group <- c("Control H2O", "0.02% DMSO", "1uM SER", "uM SER")
library(tidyverse)
library(readxl)
Ebola_SE <- read_excel("C:/Users/marqu/Downloads/Ebola_SE.xls")
View(Ebola_SE)
geom_point(mapping = aes(x = displ, y = hwy))
View(Ebola_SE)
geom_point(mapping = aes(x = ml, y = mAU))
geom_smooth(mapping = aes(x = ml, y = mAU, linetype = drv))
plot(Ebola_SE)
install.packages('tidyverse')
library(tidyverse)
ggplot(data = Ebola_SE)
geom_smooth(mapping = aes(x = ml, y = mAU, linetype = drv))
ggplot(Ebola_SE, aes(x = ml, y = mAU)) +
geom_smooth(mapping = aes(x = ml, y = mAU, linetype = drv))
ggplot(Ebola_SE, aes(x = ml, y = mAU)) +
geom_smooth(mapping = aes(x = ml, y = mAU))
ggplot(Ebola_SE, aes(x = ml, y = mAU)) +
geom_point(mapping = aes(x = ml, y = mAU))
y = 'Absorbance( mAU)' +
ggplot(Ebola_SE, aes(x = ml, y = mAU)) +
geom_point() +
labs(title = "Size Exclusion of EBOL-VP35",
x = 'Volume (ml)',
y = 'Absorbance( mAU)' +
xlim(0.00, 25.00) +
ylim(-2.00 , 3.00))
ggplot(Ebola_SE, aes(x = ml, y = mAU)) +
geom_point() +
labs(title = "Size Exclusion of EBOL-VP35",
x = 'Volume (ml)',
y = 'Absorbance( mAU)')
ggplot(Ebola_SE, aes(x = ml, y = mAU)) +
geom_point() +
labs(title = "Size Exclusion of EBOL-VP35",
x = 'Volume (ml)',
y = 'Absorbance( mAU)' +
xlim(0, 25) +
ylim(-2, 3))
ggplot(Ebola_SE, aes(x = ml, y = mAU)) +
geom_point() +
labs(title = "Size Exclusion of EBOL-VP35",
x = 'Volume (ml)',
y = 'Absorbance( mAU)' +
xlim(0, 25) +
ylim(-2, 8))
load("C:/Users/marqu/OneDrive/Desktop/CSCI_Final/.RData")
load("C:/Users/marqu/OneDrive/Desktop/CSCI_Final/ppi_network_matrixR.RData")
load("C:/Users/marqu/OneDrive/Desktop/CSCI_Final/.RData")
r <- 0.04
r <- 0.04
m0 <- 900
R = 1 + r
m1=R*m0
m2=R*m1
m3=R*m2
m4=R*m3
m5=R*m4
m6=R*m5
m7=R*m6
m8=R*m7
m9=R*m8
m10=R*m9
ts=0:10
plot(ts,ms)
tmax = 100
ms = c(m0, m1, m3, m4, m5, m6, m7, m8, m9, m10)
plot(ms,ts)
ms = c(m0, m1, m2,  m3, m4, m5, m6, m7, m8, m9, m10)
plot(ms, ts)
ms[2]
ms[1]
ms[1]
ms[2]
ms[6]
ms[3]
ms[4]
ms[t+1]
for(t in 0:(tmax-1)) {
ms[t+2] = R(ms[t+1])
}
for(t in 0:(tmax-1)) {
ms[t+2] = R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2]=R*ms[t+1]
}
for(t in 0:(tmax-1)) {
ms[t+2] = R*ms[t+1]
}
}
ts=0:tmax
plot(ms,ts)
plot(ts,ms)
ms[101]
45454.45/900
45454.45-900
45454.45-900*900(100)
A = matrix(c(0.88, 0.24, 0.22, 0.96), 2, 2, byrow=TRUE)
A = matrix(c(0.88, 0.24, 0.22, 0.96), 2, 2, byrow=TRUE)
x0 = c(176, 44)
View(A)
x0[1]
x0 * A
x0 %*% A
soln_matrix = matrix(0, nrow=2, ncol=11)
for(i in 0:9) {
x[,i+2] = A %*% x[,i+1]
}
for(i in 0:9) {
soln_matrix[,i+2] = A %*% soln_matrix[,i+1]
}
x = matrix(0, nrow=2, ncol=11)
x[,1]=c(176,44)
for(i in 0:9) {
x[,i+2] = A %*% x[,i+1]
}
A = matrix(c(0.88, 0.24, 0.22, 0.96), 2, 2, byrow=TRUE)
A = matrix(c(0.88, 0.24, 0.22, 0.96), 2, 2, byrow=TRUE)
x = matrix(0, nrow=2, ncol=21)
x[,1]=c(176, 44)
for (i in 0:9) {
x[,i+2] = A %*% x[,i+1]
}
View(x)
A = matrix(c(0.88, 0.24, 0.22, 0.96), 2, 2, byrow=TRUE)
x = matrix(0, nrow=2, ncol=21)
x[,1]=c(176, 44)
for (i in 0:21) {
x[,i+2] = A %*% x[,i+1]
}
A = matrix(c(0.88, 0.24, 0.22, 0.96), 2, 2, byrow=TRUE)
x = matrix(0, nrow=2, ncol=21)
x[,1]=c(176, 44)
for (i in 0:20) {
x[,i+2] = A %*% x[,i+1]
}
A = matrix(c(0.88, 0.24, 0.22, 0.96), 2, 2, byrow=TRUE)
x = matrix(0, nrow=2, ncol=21)
x[,1]=c(176, 44)
for (i in 0:15) {
x[,i+2] = A %*% x[,i+1]
}
for (i in 0:19) {
x[,i+2] = A %*% x[,i+1]
}
View(x)
A = matrix(c(-2.4, 1.7, -3.4, 3.3), 2, 2, byrow=TRUE)
x = matrix(0, nrow=2, ncol=11)
x[,1]=c(0.1, 1.9)
for (i in 0:19) {
x[,i+2] = A %*% x[,i+1]
}
for (i in 0:9) {
x[,i+2] = A %*% x[,i+1]
}
for (i in 0:10) {
x[,i+2] = A %*% x[,i+1]
}
for (i in 0:9) {
x[,i+2] = A %*% x[,i+1]
}
A = matrix(c(-12, 5, -30, 13), 2, 2, byrow=TRUE)
x = matrix(0, nrow=2, ncol=11)
x[,1]=c(-4,-4)
A = matrix(c(-12, 5, -30, 13), 2, 2, byrow=TRUE)
View(x)
for (i in 0:9) {
x[,i+2] = A %*% x[,i+1]
}
View(x)
setwd("C:/Users/marqu/Documents/Research_Projects2024/Bryan_RNAseq")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "quant.sf")
dir <- "salmon_out"
samples <- read.csv("salmon_out/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "quant.sf")
names(files) <- samples$name
library(AnnotationDbi)
library(org.Ce.eg.db)
library(tximport)
db <- org.Ce.eg.db
kt <- keytypes(db)
for (x in kt) {
k <- keys(db, keytype = x)
}
k <- keys(db, keytype = "ENSEMBLTRANS")
tx2gene <- AnnotationDbi::select(db, k, "ENSEMBLTRANS", "ENSEMBLTRANS")
ENSEMBLTRANS <- tx2gene$ENSEMBLTRANS
TRANS <- tx2gene$ENSEMBLTRANS
keep_trans <- data.frame(ENSEMBLTRANS, TRANS)
txi <- tximport(files, type = "salmon", tx2gene = keep_trans)
View(samples)
dir <- "salmon_out"
samples <- read.csv("salmon_out/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "salmon_out/quant.sf")
names(files) <- samples$name
dir <- "salmon_out"
samples <- read.csv("salmon_out/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "salmon_out/quant.sf")
names(files) <- samples$name
dir <- "salmon_out"
samples <- read.csv("salmon_out/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "quant.sf")
names(files) <- samples$name
dir <- "salmon_out"
samples <- read.csv("salmon_out/sample_info.csv")
dir <- "salmon_out"
samples <- read.csv("salmon/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "quant.sf")
names(files) <- samples$name
file.exists("salmon_out/salmon/N7/quant.sf")
dir <- "salmon"
samples <- read.csv("salmon/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "quant.sf")
names(files) <- samples$name
samples <- read.csv("salmon/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "quant.sf")
names(files) <- samples$name
dir <- "salmon"
samples <- read.csv("salmon/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path(dir, "salmon", samples$name, "quant.sf")
names(files) <- samples$name
dir <- "salmon"
samples <- read.csv("salmon/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path("salmon", samples$name, "quant.sf")
names(files) <- samples$name
setwd("C:/Users/marqu/Documents/Research_Projects2024/Bryan_RNAseq")
dir <- "salmon"
samples <- read.csv("salmon/sample_info.csv")
dir <- "salmon"
samples <- read.csv("salmon/sample_info.csv")
files <- file.path("salmon_out", samples$name, "quant.sf")
file.exists("salmon_out/N7/quant.sf")
dir <- "salmon"
samples <- read.csv("salmon/sample_info.csv")
dir <- "salmon"
samples <- read.csv("salmon_out/sample_info.csv")
# The following creates a vector of pathnames, then names each pathname
files <- file.path("salmon_out", samples$name, "quant.sf")
names(files) <- samples$name
library(AnnotationDbi)
library(org.Ce.eg.db)
library(tximport)
db <- org.Ce.eg.db
kt <- keytypes(db)
for (x in kt) {
k <- keys(db, keytype = x)
}
k <- keys(db, keytype = "ENSEMBLTRANS")
tx2gene <- AnnotationDbi::select(db, k, "ENSEMBLTRANS", "ENSEMBLTRANS")
ENSEMBLTRANS <- tx2gene$ENSEMBLTRANS
TRANS <- tx2gene$ENSEMBLTRANS
keep_trans <- data.frame(ENSEMBLTRANS, TRANS)
txi <- tximport(files, type = "salmon", tx2gene = keep_trans)
library(AnnotationDbi)
library(org.Ce.eg.db)
library(tximport)
db <- org.Ce.eg.db
kt <- keytypes(db)
for (x in kt) {
k <- keys(db, keytype = x)
}
k <- keys(db, keytype = "ENSEMBLTRANS")
tx2gene <- AnnotationDbi::select(db, k, "ENSEMBLTRANS", "ENSEMBLTRANS")
ENSEMBLTRANS <- tx2gene$ENSEMBLTRANS
TRANS <- tx2gene$ENSEMBLTRANS
keep_trans <- data.frame(ENSEMBLTRANS, TRANS)
txi <- tximport(files, type = "salmon", tx2gene = keep_trans)
write.csv(txi$counts, 'cts.csv')
save(txi, file='txi_bryanSeq.RData')
library(DESeq2)
dds <- DESeqDataSetFromTximport(txi, samples, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT")
dds <- DESeq(dds)
library(DESeq2)
dds <- DESeqDataSetFromTximport(txi, samples, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT")
# Run DESeq
dds <- DESeq(dds)
# Save results
res <- results(dds)
stop_res <- results(dds, name = "condition_rsp.2_phosphodead_vs_WT")
phosphomimetic_res <- results(dds, name = "condition_rsp.2_STOP_vs_WT")
phosphodead <- results(dds, name = "condition_rsp.2_phosphomimetic_vs_WT")
echo=FALSE
View(phosphodead)
View(phosphomimetic_res)
View(res)
View(phosphomimetic_res)
View(phosphomimetic_res)
View(phosphodead)
View(phosphomimetic_res)
View(res)
resultsNames(dds) # Will list conditions
library(DESeq2)
dds <- DESeqDataSetFromTximport(txi, samples, design = ~ condition)
dds$condition <- relevel(dds$condition, ref = "WT")
# Run DESeq
dds <- DESeq(dds)
# Save results
res <- results(dds)
stop_res <- results(dds, name = "condition_rsp.2_phosphodead_vs_WT")
phosphomimetic_res <- results(dds, name = "condition_rsp.2_STOP_vs_WT")
phosphodead_res <- results(dds, name = "condition_rsp.2_phosphomimetic_vs_WT")
plotMA(phosphomimetic_res, ylim = c(-5, 5))
plotMA(phosphodead_res, ylim = c(-2, 2))
plotMA(stop_res, ylim = c(2, 2))
plotMA(phosphomimetic_res, ylim = c(-5, 5))
plotMA(phosphodead_res, ylim = c(-2, 2))
plotMA(stop_res, ylim = c(-2, 2))
# Perform a variance stabilized transformation
vsd <- vst(dds)
plotPCA(
vsd,
intgroup = "condition"
)
rld
# rlog transformation of data
rld <- rld(dds)
# rlog transformation of data
rld <- rlog(dds)
top50_most_variance <- names(sort(rld, decreasing = TRUE)[1:50])
variances <- apply(assay(varianceStabilizingTransformation(dds)), 1, var)
variances <- apply(assay(varianceStabilizingTransformation(dds)), 1, var)
top_50_gene_var_names <- names(sort(variances, decreasing = TRUE)[1:50])
top_50_gene_variances <- assay(dds)[top50,]
top_50_gene_variances <- assay(dds)[top_50_gene_var_names,]
library(pheatmap)
variances <- apply(assay(varianceStabilizingTransformation(dds)), 1, var)
top_50_gene_var_names <- names(sort(variances, decreasing = TRUE)[1:50])
top_50_gene_variances <- assay(dds)[top_50_gene_var_names,]
pheatmap(top_50_gene_var_names, cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("blue", "white", "red"))(50),
fontsize_row = 5,
fontsize_col = 8)
library(pheatmap)
library(RColorBrewer)
variances <- apply(assay(varianceStabilizingTransformation(dds)), 1, var)
top_50_gene_var_names <- names(sort(variances, decreasing = TRUE)[1:50])
top_50_gene_variances <- assay(dds)[top_50_gene_var_names,]
pheatmap(top_50_gene_var_names, cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("blue", "white", "red"))(50),
fontsize_row = 5,
fontsize_col = 8)
library(pheatmap)
library(RColorBrewer)
variances <- apply(assay(varianceStabilizingTransformation(dds)), 1, var)
top_50_gene_var_names <- names(sort(variances, decreasing = TRUE)[1:50])
top_50_gene_variances <- assay(dds)[top_50_gene_var_names,]
pheatmap(top_50_gene_var_names, cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("blue", "white", "red"))(50),
fontsize_row = 5,
fontsize_col = 8)
library(EnhancedVolcano)
EnhancedVolcano(phosphodead_res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue'
)
library(EnhancedVolcano)
EnhancedVolcano(phosphodead_res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(phosphomimetic_res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(stop_res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
